@page "/users/update/{userId}"

@inject NavigationManager NavigationManager
@using BusinessLogic.Entities
@inject IJSRuntime JSRuntime

<PageTitle>Update User</PageTitle>

<h2>Update User</h2>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (User == null)
{
    <p>User not found.</p>
}
else
{
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/users">Utilizadores</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/admin/assets">Ativos</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/admin/deposits">Depósitos a prazo</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/admin/funds">Fundos de Investimento</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/admin/rented">Imóveis Arrendados</NavLink>
                </li>
            </ul>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/login">Logout</NavLink>
                </li>
            </ul>
        </div>
    </nav>
    <div class="form-group">
        <label for="username">Username</label>
        <input type="text" class="form-control" id="username" placeholder="Enter your username" @bind="@User.Username">
    </div>
    <div class="form-group mt-3">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" placeholder="Enter your password" @bind="@User.Password">
    </div>
    <div class="form-group mt-3">
        <label for="userType">User Type</label>
        <input type="text" class="form-control" id="userType" placeholder="Set to Admin, UserManager, or User" @bind="@User.UserType">
    </div>
    <div class="form-group mt-3">
        <label for="userStatus">User Status</label>
        <input type="text" class="form-control" id="userStatus" placeholder="Set to Ativo or Inativo" @bind="@User.UserStatus">
    </div>
    <div class="form-group mt-3">
        <button type="button" class="btn btn-primary" @onclick="HandleUpdateUser">Update User</button>
    </div>
}

@code {
    private int userId;
    private User User;
    private bool IsLoading = true;
    
    [Parameter]
    public string UserId
    {
        get => userId.ToString();
        set
        {
            if (int.TryParse(value, out var id))
            {
                userId = id;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the user ID from the route parameters
        var routeData = NavigationManager.Uri.Split('/').Last();
        userId = int.Parse(routeData);

        // Fetch the user details from the server and populate the form
        await FetchUserDetailsAsync();
    }

    private async Task FetchUserDetailsAsync()
    {
        var url = $"http://localhost:5052/api/Users/get/{userId}";

        using var client = new HttpClient();
        var response = await client.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var user = await response.Content.ReadFromJsonAsync<User>();
            User = user;
        }
        else
        {
            Console.WriteLine("Error retrieving user details");
        }

        IsLoading = false;
    }

    private async Task HandleUpdateUser()
    {
        if (User != null)
        {
            var url = $"http://localhost:5052/api/Users/update/{userId}";

            using var client = new HttpClient();
            var response = await client.PutAsJsonAsync(url, User);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Update successful");
                
                // Navigate back to the previous link using JavaScript interop
                await JSRuntime.InvokeVoidAsync("history.back");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Error updating user: " + error);
            }
        }
    }
}
